from itertools import combinations
import csv
import logging


def brute_force(actions, budget):
    if not isinstance(actions, list):
        return "Erreur : le param√®tre 'actions' doit √™tre une liste"

    if not actions:
        return None

    best_combination = None
    nb_combi = 0

    for r in range(1, len(actions) + 1):
        for combination in combinations(actions, r):
            total_cost = sum(action["cost"] for action in combination)
            total_benefit = sum(action["cost"] *  action["percent_benefit"] / 100 for action in combination)
            if total_cost <= budget:
                nb_combi += 1
                if best_combination is None or total_benefit >= best_combination[2]:
                    best_combination = (combination, total_cost, total_benefit, nb_combi)

    return  best_combination, nb_combi


"""

Voir la complexite de sum() et de combinaison


combinaison : Dans Python, le module itertools fournit
une fonction utile appel√©e combinations. Cette fonction 
permet de g√©n√©rer toutes les combinaisons possibles d'une 
s√©quence donn√©e en sp√©cifiant la longueur de chaque combinaison.

L18 : Dans cette ligne, nous utilisons une expression de compr√©hension 
de liste pour obtenir une liste des co√ªts de chaque action dans la combinaison.
Ensuite, nous passons cette liste √† la fonction sum() pour obtenir la somme totale des co√ªts.


L19:De mani√®re similaire, nous utilisons une expression de compr√©hension de liste pour obtenir
une liste des b√©n√©fices de chaque action dans la combinaison. Nous multiplions le co√ªt de chaque 
action par son pourcentage de b√©n√©fice, puis nous divisons par 100 pour obtenir la valeur r√©elle du b√©n√©fice.
Ensuite, nous passons cette liste √† la fonction sum() pour obtenir la somme totale des b√©n√©fices.

Ces calculs nous permettent de d√©terminer si une combinaison est valide en fonction du budget donn√©,
et de comparer les diff√©rentes combinaisons pour trouver celle qui a le b√©n√©fice le plus √©lev√© tout 
en respectant le budget.




sum : Dans notre algorithme, nous utilisons la fonction sum() 
pour calculer la somme des co√ªts des actions et la somme des 
b√©n√©fices des actions dans une combinaison donn√©e

Soution Programmation dynamique pour le probl√®me du sac √† dos :
La programmation dynamique consiste √† diviser le probl√®me en sous-probl√®mes plus petits,
de mani√®re r√©cursive, et √† m√©moriser les r√©sultats de chaque sous-probl√®me pour √©viter de 
les recalculer √† chaque fois. On construit g√©n√©ralement une matrice pour stocker les solutions
interm√©diaires. Cette approche garantit la solution optimale pour le probl√®me du sac √† dos, 
mais peut √™tre plus complexe √† mettre en ≈ìuvre



"""



#logging.basicConfig(level=logging.DEBUG)



def taux_de_rendement(prix_achat, prix_vente):
    logging.info('D√©but du calcul du rendement.')

    if prix_achat is not None and prix_vente is not None:
        logging.info('Les prix d\'achat et de vente sont fournis.')

        prix_achat_float = float(prix_achat.replace(',', '.')) 
        prix_vente_float = float(prix_vente.replace(',', '.')) 

        logging.info(f'Prix d\'achat converti en float: {prix_achat_float}, Prix de vente converti en float: {prix_vente_float}')

        if prix_achat_float > 0:
            rendement = ((prix_vente_float - prix_achat_float) / prix_achat_float) * 100

            logging.info(f'Rendement calcul√©: {rendement}')

            if rendement >= 0:
                logging.info('Rendement positif.')
                return f"Bon rendement chacal : {round(rendement)}üî•‚¨ÜÔ∏è"
            else:
                logging.info('Rendement n√©gatif.')
                return f"Vous avez subi une perte de {abs(rendement):.2f}% ü•∂‚¨áÔ∏è"
        else:
            logging.warning('Rendement impossible √† calculer (prix d\'achat nul)')
            return "Rendement impossible √† calculer (prix d'achat nul)"
    else:
        logging.warning('Rendement impossible √† calculer (fichier corrompus)')
        return "Rendement impossible √† calculer (fichier corrompus)"

    
    ##24 juillet 
  

    
def programmation_dynamique(actions, budget):
    nombre_actions = len(actions)  # On compte le nombre total d'actions

    # On initialise un tableau pour stocker nos calculs interm√©diaires.
    # Le tableau a (nombre_actions + 1) lignes et (budget + 1) colonnes.
    # On remplit le tableau avec des z√©ros.
    tableau = []
    for _ in range(nombre_actions + 1):
        tableau.append([0] * (budget + 1))

    # On parcourt le tableau ligne par ligne
    for i in range(1, nombre_actions + 1):
        for c in range(1, budget + 1):
            # Le co√ªt de l'action actuelle est le co√ªt de l'action √† l'index (i - 1) dans la liste des actions
            cout_action_actuelle = actions[i - 1]["cost"]

            # Le b√©n√©fice de l'action actuelle est le pourcentage de b√©n√©fice de l'action √† l'index (i - 1) dans la liste des actions,
            # multipli√© par le co√ªt de cette action
            benefice_action_actuelle = actions[i - 1]["cost"] * actions[i - 1]["percent_benefit"] / 100

            # Si le co√ªt de l'action actuelle est inf√©rieur ou √©gal √† la capacit√© actuelle du sac √† dos (c)
            if cout_action_actuelle <= c:
                # On peut choisir d'inclure l'action actuelle dans le sac √† dos.
                # Si on l'inclut, le b√©n√©fice total est le b√©n√©fice de l'action actuelle, plus le b√©n√©fice total qu'on peut obtenir
                # avec le reste de la capacit√© du sac √† dos (c - cout_action_actuelle).
                # Si on n'inclut pas l'action actuelle, le b√©n√©fice total est le m√™me que le b√©n√©fice total de la ligne pr√©c√©dente.
                tableau[i][c] = max(tableau[i - 1][c], tableau[i - 1][c - cout_action_actuelle] + benefice_action_actuelle)
            else:
                # Si le co√ªt de l'action actuelle est sup√©rieur √† la capacit√© actuelle du sac √† dos, on ne peut pas inclure l'action actuelle.
                # Donc, le b√©n√©fice total est le m√™me que le b√©n√©fice total de la ligne pr√©c√©dente.
                tableau[i][c] = tableau[i - 1][c]

    # Maintenant, on retrouve la meilleure combinaison d'actions.
    meilleure_combinaison = []
    c = budget
    for i in range(nombre_actions, 0, -1):
        # Si le b√©n√©fice total de la ligne actuelle est diff√©rent du b√©n√©fice total de la ligne pr√©c√©dente,
        # cela signifie que l'action √† l'index (i - 1) dans la liste des actions a √©t√© incluse dans la meilleure combinaison.
        if tableau[i][c] != tableau[i - 1][c]:
            meilleure_combinaison.append(actions[i - 1])
            c -= actions[i - 1]["cost"]

    return meilleure_combinaison, tableau[nombre_actions][budget]


    

def calculer_taux_de_rendement_fichier_csv(nom_fichier):
    with open(nom_fichier, newline='') as csvfile:
        # Sp√©cifier manuellement les noms des colonnes avec fieldnames
        fieldnames = ['name', 'price', 'profit']
        reader = csv.DictReader(csvfile, fieldnames=fieldnames)
        # Ignorer la premi√®re ligne (en-t√™te) car nous l'avons sp√©cifi√©e manuellement
        next(reader)
        total_achat_action = 0
        somme_total_action = 0  # Initialiser la somme totale √† z√©ro

        for row in reader:
            nom_action = row['name']
            prix_achat = row["price"]
            prix_vente = row["profit"]
            
            if prix_achat != "0":
                resultat = taux_de_rendement(prix_achat, prix_vente)
                print(f"Action : {nom_action}, Taux de rendement : {resultat}%")
            else:
                print(f"L'action {nom_action} a un prix d'achat de 0. Son taux de rendement n'est pas calcul√©.")
            total_achat_action += 1
            
            try:
                somme_total_action += float(prix_achat.replace(',', '.'))  # Ajouter le prix d'achat √† la somme totale
            except ValueError:
                print(f"Erreur : Impossible de convertir le prix d'achat de l'action {nom_action} en float.")
                continue

        print(f"Le nombre total d'actions est : {total_achat_action} action pour un montant total de {somme_total_action:.2f} euro")
        # print(f"Pour le fichier {name_file}")




"""

    Conclusion

    Avec un calcule de une formule de taux de rendement 
    On peut voir des erreurs 
    Notamment qu'il y a des case nul qui on fait du profit wtf
    + taux rendement negatif
"""